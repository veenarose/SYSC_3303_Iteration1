public void handleWriteRequest(String filename) throws
        TFTPExceptions.FileAlreadyExistsException, 
        SocketTimeoutException,
        TFTPExceptions.InvalidBlockNumberException,
        TFTPExceptions.InvalidTFTPDataException, 
        TFTPExceptions.ErrorReceivedException,
        TFTPExceptions.DiskFullException {
 
            if(isRunning == false){
                System.out.print("Server Shut Down\n");
                return;
            }
 
            //check if the file already exists locally on the client
            TFTPExceptions.FileAlreadyExistsException fileExists = 
                    new TFTPExceptions().new FileAlreadyExistsException
                    ("File " + filename + " already exists locally. "
                            + "To avoid overwriting data the read request has been denied.");
            if(fileNames.contains(filename)) { 
                //TODO handleFileExists
                throw fileExists; 
            }
 
            byte receivedData[] = new byte[ackSize + bufferSize]; 
            int blockNumber = 0;
            byte ackToBeSent[] = new byte[4];
 
            ackToBeSent = PacketManager.createAck(receivedData);
 
            sendPacket = new DatagramPacket(ackToBeSent, ackToBeSent.length,clientHost, clientPort);
            receivePacket = new DatagramPacket(receivedData, receivedData.length);
 
            //send ACK 0
            PacketManager.send(sendPacket, sendReceiveSocket);
            PacketManager.ackPacketPrinter(sendPacket);
            blockNumber++;
 
            int tries = ProfileData.getRepeats(); //number of times to relisten
            boolean received = false;
            while(!received) { //repeat until a successful receive
                try {
                    PacketManager.receive(receivePacket, sendReceiveSocket);
                    received = true; //first data packet received
                } catch(SocketTimeoutException e) { //
                    if(--tries == 0) {
                        PacketManager.handleTimeOut(clientHost, sendPacket.getPort(), sendReceiveSocket, "Server"); //send error packet to server
                        throw e;
                    }
                }
            }
 
            //check if last packet
            if(PacketManager.isLast(receivedData)) {
                System.out.print("The file from which the write data comes from is empty, write request considered complete.");
                return;
 
            }
 
            //check for error packet
            if(PacketManager.isErrorPacket(receivedData)) {
                System.out.print("Received an error packet with code: " + receivedData[3]
                        + " Exiting connection and terminating file transfer.\n");
                byte[] errorMsg = new byte[receivedData.length - 4];
                System.arraycopy(receivedData, 4, errorMsg, 0, errorMsg.length);
                System.out.print("Error message: " + new String(errorMsg) + "\n");
                throw new TFTPExceptions().new ErrorReceivedException(new String(errorMsg));
            }
 
            //check for valid data
            try {
                PacketManager.validateDataPacket(receivedData);
            } catch (TFTPExceptions.InvalidTFTPDataException e) {
                PacketManager.handleInvalidDataPacket(receivedData, clientHost, clientPort, sendReceiveSocket);
                throw e;
            }
 
            //check block number
            if(blockNumber != PacketManager.getBlockNum(receivedData)) {
                PacketManager.handleInvalidBlockNumber(blockNumber, PacketManager.getBlockNum(receivedData), clientHost, clientPort, sendReceiveSocket);
                throw new TFTPExceptions().new InvalidBlockNumberException(
                        "Invalid block number detected. "
                                + "Expected " + blockNumber + "."
                                + "Found " + PacketManager.getBlockNum(receivedData));
            }
 
            System.out.print("Packet Block Number: " + PacketManager.getBlockNum(receivedData) + "\n");
 
            if(!PacketManager.diskSpaceCheck(ServerDirectory, PacketManager.filesize(PacketManager.getData(receivePacket.getData())))){
                //if we dont have enough space to write the next block
                PacketManager.handleDiskFull(ServerDirectory, clientHost, clientPort, sendReceiveSocket);
                //throw new TFTPExceptions().new DiskFullException("Not enough space to write to disk");
                throw new TFTPExceptions().new DiskFullException("Not enough space to write to disk");
            }
 
            File writeTo = new File(ServerDirectory + filename); //file to write to locally
            byte writeToFileData[] = new byte[0];
            writeToFileData = PacketManager.getData(receivedData);
            try {
                IOManager.write(writeTo, writeToFileData);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
 
 
            while(true) {
 
                if(isRunning == false){
                    System.out.print("Server Shut Down\n");
                    return;
                }
 
                System.out.print("Received:\n");
                System.out.print(Arrays.toString(PacketManager.getData(receivedData))  + "\n");
 
                ackToBeSent = PacketManager.createAck(receivedData);
                receivedData = new byte[ackSize + bufferSize];
 
                //send ACK
                sendPacket = new DatagramPacket(ackToBeSent, ackToBeSent.length, 
                        clientHost, clientPort);
                receivePacket = new DatagramPacket(receivedData, receivedData.length);
 
                PacketManager.send(sendPacket, sendReceiveSocket);
                blockNumber++;
 
                tries = ProfileData.getRepeats(); //number of times to relisten
                received = false;
                while(!received) { //repeat until a successful receive
                    try {
                        PacketManager.receive(receivePacket, sendReceiveSocket);
                        received = true; //first data packet received
                    } catch(SocketTimeoutException e) { //
                        if(--tries == 0) {
                            PacketManager.handleTimeOut(clientHost, sendPacket.getPort(), sendReceiveSocket, "Server"); //send error packet to server
                            throw e;
                        }
                    }
                }
 
                if(PacketManager.isLast(receivedData)) { break; }
 
                //check for error packet
                if(PacketManager.isErrorPacket(receivedData)) {
                    System.out.print("Received an error packet with code: " + receivedData[3]
                            + " Exiting connection and terminating file transfer.\n");
                    byte[] errorMsg = new byte[receivedData.length - 4];
                    System.arraycopy(receivedData, 4, errorMsg, 0, errorMsg.length);
                    System.out.print("Error message: " + new String(errorMsg) + "\n");
                    throw new TFTPExceptions().new ErrorReceivedException(new String(errorMsg));
                }
 
                //check for valid data
                try {
                    PacketManager.validateDataPacket(receivedData);
                } catch (TFTPExceptions.InvalidTFTPDataException e) {
                    PacketManager.handleInvalidDataPacket(receivedData, clientHost, clientPort, sendReceiveSocket);
                    throw e;
                }
 
                //check block number
                if(blockNumber != PacketManager.getBlockNum(receivedData)) {
                    PacketManager.handleInvalidBlockNumber(blockNumber, PacketManager.getBlockNum(receivedData), clientHost, clientPort, sendReceiveSocket);
                    throw new TFTPExceptions().new InvalidBlockNumberException(
                            "Invalid block number detected. "
                                    + "Expected " + blockNumber + "."
                                    + "Found " + PacketManager.getBlockNum(receivedData));
                }
 
                System.out.print("Packet Block Number: " + PacketManager.getBlockNum(receivedData) + "\n");
 
                if(!PacketManager.diskSpaceCheck(ServerDirectory, PacketManager.filesize(PacketManager.getData(receivePacket.getData())))){
                    //if we dont have enough space to write the next block
                    PacketManager.handleDiskFull(ServerDirectory, clientHost, clientPort, sendReceiveSocket);
                    throw new TFTPExceptions().new DiskFullException("Not enough space to write to disk");
 
                }
 
                writeToFileData = PacketManager.getData(receivedData);
                try {
                    IOManager.write(writeTo, writeToFileData);
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
 
            }
 
            System.out.print("Write complete.\n");
        }
    }